---
version: 2.1

orbs:
  op: twdps/onepassword@1.0.0
  cosign: twdps/cosign@0.1.0
  kube: twdps/kube-ops@0.3.0
  do: twdps/pipeline-events@0.2.0

# =================================== globals

globals:
  - &context twdps-core-labs-team
  - &kubectl-version 1.25.4
  - &kind-version 0.18.0
  - &bats-version 1.9.0

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-release: &on-tag-release
  branches:
    ignore: /.*/
  tags:
    only:
      - /^((([0-9]+)\.([0-9]+)\.([0-9]+))?)$/

# =================================== commands and jobs

commands:

  set-environment:
    steps:
      - op/install-op:
          os: Ubuntu
      - op/env:
          env-file: op.env
      - do/validate-docker-credentials:
          registry: ghcr.io
        
  # integration-tests:
  #   steps: 
  #     - run:
  #         name: launch ci local cluster
  #         command: kind create cluster --name test && sleep 10 # kind needs a bit of time to get a node available
  #     - run:
  #         name: deploy tls test app
  #         command: bash scripts/deploy_test_app.sh && sleep 25 # app needs a bit of time to let the init container run and then startup the test app
  #     - run:
  #         name: test for successful certificate creation
  #         command: bats test/certificate-init-container.bats

jobs:

  continuous-integration:
    docker:
      - image: cimg/go:1.20.4
    steps:
      - checkout
      - setup_remote_docker
      - set-environment
      - kube/packages:
          use-sudo: true
          kubectl-version: *kubectl-version
          kind-version: *kind-version
      - kube/packages:
          use-sudo: false
          bats-version: *bats-version
      - run:
          name: install go static analysis tools
          command: |
            # TODO. Parameterize golangci-lint install version
            echo 'install golangci-lint'
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $HOME/.go_workspace/bin v1.53.2
            golangci-lint --version

            # TODO. Parameterize and pin snyk install version
            curl --compressed https://static.snyk.io/cli/latest/snyk-linux -o snyk
            chmod +x ./snyk && sudo mv ./snyk /usr/local/bin/
            snyk version
      - run:
          name: lint
          command: |
            golangci-lint run ./...
      - run:
          name: snyk vulnerability assessment
          command: snyk test
      - run:
          name: build dev image
          command: make build
      - run:
          name: push dev build to registry
          command: make push
      # - integration-tests

  release:
    docker:
      - image: cimg/go:1.20.4
    steps:
      - checkout
      - setup_remote_docker
      - cosign/install
      - set-environment
      - run:
          name: fetch keys for signing
          command: |
            op inject -i cosign.key.env -o cosign.key
            op inject -i cosign.pub.env -o cosign.pub
      - run:
          name: Use goreleaser to build and publish executables
          command: |
            curl -sL https://git.io/goreleaser | bash
      - run: 
          name: validate signature
          command: cosign verify -key cosign.pub ghcr.io/thoughtworks-dps/demo-api-guestbook
      - do/prune-dockerhub:
          repository: ghcr.io/thoughtworks-dps/demo-api-guestbook
          tag-filter: dev

  # smoke-test-containers:
  #   parameters:
  #     architecture:
  #       type: executor
  #   executor: << parameters.architecture >>
  #   steps:
  #     - checkout
  #     - run:
  #         name: run image and review logs 
  #         command: bash scripts/review_log_output.sh

# =================================== workflows

workflows:
  version: 2

  development build:
    jobs:
      - continuous-integration:
          name: run static code analysis and integration tests
          context: *context
          filters: *on-push-main

  release:
    jobs:
      - release:
          name: publish release version
          context: *context
          filters: *on-tag-release

      # - smoke-test-containers:
      #     name: smoke test containers by architecture
      #     matrix:
      #       parameters:
      #         architecture: [ amd64, arm64 ]
      #     requires:
      #       - publish release version
      #     filters: *on-tag-release
