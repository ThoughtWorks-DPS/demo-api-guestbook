---
version: 2.1

orbs:
  op: twdps/onepassword@1.0.0
  cosign: twdps/cosign@0.1.0
  kube: twdps/kube-ops@0.3.0
  do: twdps/pipeline-events@0.2.0

# =================================== global pipeline parameters/variables

executors:

  amd64:
    machine:
      image: ubuntu-2204:2022.10.2
  arm64:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium

parameters:

  context:
    description: circleci context for all jobs
    type: string
    default: twdps-core-labs-team

  kubectl-version:
    type: string
    default: "1.25.4"
  kind-version:
    type: string
    default: "0.17.0"
  bats-version:
    type: string
    default: "1.8.2"
  staticcheck-version:
    type: string
    default: "2022.1.3"
  golangci-lint-version:
    type: string
    default: "1.50.1"
  govulncheck-version:
    type: string
    default: "latest"

# =================================== triggers

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-release: &on-tag-release
  branches:
    ignore: /.*/
  tags:
    only:
      - /^((([0-9]+)\.([0-9]+)\.([0-9]+))?)$/

# =================================== commands and jobs

commands:

  set-environment:
    steps:
      - op/install-op:
          os: Ubuntu
      - op/env:
          env-file: op.env
      - do/validate-docker-credentials:
          registry: ghcr.io
        
  # integration-tests:
  #   steps: 
  #     - run:
  #         name: launch ci local cluster
  #         command: kind create cluster --name test && sleep 10 # kind needs a bit of time to get a node available
  #     - run:
  #         name: deploy tls test app
  #         command: bash scripts/deploy_test_app.sh && sleep 25 # app needs a bit of time to let the init container run and then startup the test app
  #     - run:
  #         name: test for successful certificate creation
  #         command: bats test/certificate-init-container.bats

jobs:

  continuous-integration:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - setup_remote_docker
      - set-environment
      # - kube/packages:
      #     use-sudo: true
      #     kubectl-version: << pipeline.parameters.kubectl-version >>
      #     kind-version: << pipeline.parameters.kind-version >>
      # - kube/packages:
      #     use-sudo: false
      #     bats-version: << pipeline.parameters.bats-version >>
      - run:
          name: install go static analysis tools
          command: |
            echo 'install staticcheck'
            go install honnef.co/go/tools/cmd/staticcheck@<< pipeline.parameters.staticcheck-version >>
            staticcheck -version

            echo 'install golangci-lint'
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $HOME/.go_workspace/bin v<< pipeline.parameters.golangci-lint-version >>
            golangci-lint --version

            # echo 'install govulncheck'
            # go install golang.org/x/vuln/cmd/govulncheck@<< pipeline.parameters.govulncheck-version >>
            # govulncheck --help
      - run:
          name: static code analysis
          command: |
            staticcheck ./...
      - run:
          name: lint
          command: |
            golangci-lint run ./...
      # - run:
      #     name: golang specific vulnerability assessment
      #     command: govulncheck ./...
      - run:
          name: build dev image
          command: make build
      - run:
          name: push dev build to registry
          command: make push
      - integration-tests

  release:
    docker:
      - image: cimg/go:1.20.4
    steps:
      - checkout
      - setup_remote_docker # - cosign/install
      - set-environment
      # - run:
      #     name: fetch keys for signing
      #     command: |
      #       echo "op://empc-lab/svc-cosign-private-key/notesPlain" > cosign.key.env
      #       echo "op://empc-lab/svc-cosign-public-key/notesPlain" > cosign.pub.env
      #       op inject -i cosign.key.env -o cosign.key
      #       op inject -i cosign.pub.env -o cosign.pub
      - run:
          name: Use goreleaser to build and publish executables
          command: |
            curl -sL https://git.io/goreleaser | bash
      # - run: 
      #     name: validate signature
      #     command: cosign verify -key cosign.pub twdps/certificate-init-container
      # - do/prune-dockerhub:
      #     repository: twdps/certificate-init-container
      #     tag-filter: dev

  # smoke-test-containers:
  #   parameters:
  #     architecture:
  #       type: executor
  #   executor: << parameters.architecture >>
  #   steps:
  #     - checkout
  #     - run:
  #         name: run image and review logs 
  #         command: bash scripts/review_log_output.sh

# =================================== workflows

workflows:
  version: 2

  # development build:
  #   jobs:
  #     - continuous-integration:
  #         name: run static code analysis and integration tests
  #         context: << pipeline.parameters.context >>
  #         filters: *on-push-main

  release:
    jobs:
      - release:
          name: publish release version
          context: << pipeline.parameters.context >>
          filters: *on-tag-release

      # - smoke-test-containers:
      #     name: smoke test containers by architecture
      #     matrix:
      #       parameters:
      #         architecture: [ amd64, arm64 ]
      #     requires:
      #       - publish release version
      #     filters: *on-tag-release
